#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        # Create Unix sockets for each connected neighbor.
        for relationship in networks:
            network, relation = relationship.split("-")
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        for entry in self.routes:
            # split netmask and daddr by the IP dots
            netmask_split = entry[NMSK].split('.')
            daddr_split = daddr.split('.')

            # bitwise ANd the netmask with the daddr
            result = []
            for i in range(0, len(netmask_split)):
                result.append(str(int(netmask_split[i]) & int(daddr_split[i])))
            
            # compare ANDed result to the network
            is_valid = True
            network_split = entry[NTWK].split('.')
            for i in range(0, len(network_split)):
                if result[i] != network_split[i]:
                    is_valid = False
                    break
            if is_valid:
                outroutes.append(entry)

        if len(outroutes) == 0:
            return outroutes

        # reform IP address
        outroutes.sort(key=lambda r: int(r[NMSK].replace('.', '')), reverse=True)
        longest_matching_prefix = int(outroutes[0][NMSK].replace('.', ''))
        outroutes = list(filter(lambda r: int(r[NMSK].replace('.', '')) == longest_matching_prefix, outroutes))
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # filter out any routes that don't have the shortest AS path
        outroutes = routes.copy()
        outroutes.sort(key=lambda r: len(r[MESG][APTH]))
        lowest = len(outroutes[0][MESG][APTH])
        outroutes = list(filter(lambda r: len(r[MESG][APTH]) == lowest, outroutes))
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest localPref """
        # filter out any routes that don't have the highest localPref
        outroutes = routes.copy()
        outroutes.sort(reverse=True, key=lambda r: r[MESG][LPRF])
        highest = outroutes[0][MESG][LPRF]
        outroutes = list(filter(lambda r: r[MESG][LPRF] == highest, outroutes))
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        # filter out any routes that don't have self origin
        outroutes = routes.copy()
        outroutes = list(filter(lambda r: r[MESG][SORG], outroutes))
        # handle edge case if all outroutes' selfOrigin is false
        if len(outroutes) == 0:
            return routes.copy()
        return outroutes

    # IGP > EGP > UNK
    def sortOrigins(self, e):
        e = e[MESG][ORIG]
        if e == 'IGP':
            return 3
        elif e == 'EGP':
            return 2
        else:
            return 1

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        # filter out any routes that don't have the highest precedence origin
        outroutes = routes.copy()
        outroutes.sort(reverse=True, key=self.sortOrigins)
        highest = outroutes[0][MESG][ORIG]
        outroutes = list(filter(lambda r: r[MESG][ORIG] == highest, outroutes))
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        def filt(route):
            dst = route[DEST][:-1]
            dst += '2'
            return self.relations[srcif] == CUST or self.relations[dst] == CUST

        outroutes = routes.copy()
        outroutes = list(filter(filt, outroutes))
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. IGP > EGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            if len(routes) > 1:
                # split into each IP section and get the lowest IP
                strRoutes = routes.copy()
                strRoutes.sort(key=lambda r: int(r[SRCE].replace('.', '')))
                routes = [strRoutes[0]]
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        peer = routes[0][PEER] if len(routes) != 0 else None
        return peer if peer else None

    def forward(self, srcif, packet):
        # packet is already decoded
        """	Forward a data packet	"""
        def send_no_route():
            send_src = srcif[:-1]
            send_src += '1'
            self.sockets[srcif].send(json.dumps({
                SRCE: send_src,
                DEST: packet[SRCE],
                TYPE: NRTE,
                MESG: {}
            }).encode())
        # GEt correct route.
        sock_addr = self.get_route(srcif, packet[DEST])

        # If no route available, send no route message back
        if sock_addr == None:
            send_no_route()
        else:
            sock = self.sockets[sock_addr]
            # If socket is available, send to proper neighbor.
            sock.send(json.dumps(packet).encode())
        return False

    def get_correct_updates_list(self):
        result = []
        indicies_to_remove = []
        for update in self.updates.copy():
            if update[TYPE] == RVKE:
                # filter out the update that was revoked
                for i, x in enumerate(result):
                    for msg in update[MESG]:
                        if msg[NTWK] == x[MESG][NTWK] and msg[NMSK] == x[MESG][NMSK] and update[SRCE] == x[SRCE]:
                            indicies_to_remove.append(i)
                            break
            else:
                result.append(update)

        for index in indicies_to_remove:
            del result[index]
        return result

    def coalesce(self, srcif):
        """	coalesce any routes that are right next to each other	"""
        def can_be_combined(entry1, entry2):
            # same netmask
            if entry1[NMSK] != entry2[NMSK]:
                return False

            # if numerically adjacent
            entry1_split = entry1[NTWK].split('.')
            entry2_split = entry2[NTWK].split('.')

            diff = 0
            for i, val in enumerate(entry1_split):
                diff += abs(int(entry1_split[i]) - int(entry2_split[i]))
            
            if diff != 1:
                return False

            # forward to the same next hop router
            entry1_next_hop_addr = self.get_route(srcif, entry1[NTWK])
            entry2_next_hop_addr = self.get_route(srcif, entry2[NTWK])

            if entry1_next_hop_addr != entry2_next_hop_addr:
                return False

            # have the same attributes
            if entry1[MESG][LPRF] != entry2[MESG][LPRF] or entry1[MESG][APTH] != entry2[MESG][APTH] or entry1[MESG][ORIG] != entry2[MESG][ORIG] or entry1[MESG][SORG] != entry2[MESG][SORG]:
                return False

            return True

        def lowest_ip(entries):
            # get the lowest IP of all the given entries
            min = float('inf')
            min_index = 0
            for i, entry in enumerate(entries):
                num = int(entry[NTWK].replace('.', ''))
                if num < min:
                    min = num
                    min_index = i
            return entries[min_index][NTWK]

        def new_netmask(entries):
            netmask = entries[0][NMSK]
            split = netmask.split('.')
            # last_section_index_with_value is the last section of the IP with a non-zero value
            last_section_index_with_value = len(split) - 1

            for i, val in enumerate(split):
                if int(split[i]) == 0:
                    break
                last_section_index_with_value = i

            # a string of binary for the last_section_index_with_value section
            section_binary_str = str(bin(int(split[last_section_index_with_value])).replace('0b', ''))

            # replace the last sqrt of length of entries of 1's with 0's
            for _ in range(0, int(math.sqrt(len(entries)))):
                index_of_1_to_drop = section_binary_str.rindex('1')
                binary_array = list(section_binary_str)
                binary_array[index_of_1_to_drop] = '0'
                section_binary_str = ''.join(binary_array)

            # rebuild the modified binary
            new_decimal_as_str = str(int(''.join(binary_array), 2))

            result_arr = []
            # rebuild the whole IP address
            for i, _ in enumerate(split):
                if i != last_section_index_with_value:
                    result_arr.append(split[i])
                else:
                    result_arr.append(new_decimal_as_str)
            
            # join the IP by dots
            return '.'.join(result_arr)

        # make grouping of routes that can be combined
        grouped_routes = [] # list of lists
        for entry in self.get_correct_updates_list():
            if len(grouped_routes) == 0:
                grouped_routes.append([entry])
                continue

            # form the groups, if an entry can be combined with another group, add it to the group
            matching_group_index = -1
            for j, grouped in enumerate(grouped_routes):
                for entry_in_group in grouped:
                    if can_be_combined(entry, entry_in_group):
                        matching_group_index = j
                        break

            # otherwise, create a new group with that entry
            if matching_group_index == -1:
                grouped_routes.append([entry])
            else:
                grouped_routes[matching_group_index].append(entry)

        new_routes = []
        # combine all routes in each group
        for group in grouped_routes:
            if len(group) < 2:
                new_routes.append(group[0])
                continue
            # each group can be combined
            ip = lowest_ip(group)
            netmask = new_netmask(group)
            new_routes.append({
                NTWK: ip,
                NMSK: netmask,
                PEER: group[0][PEER],
                TYPE: 'update',
                SRCE: group[0][SRCE],
                DEST: group[0][DEST],
                MESG: {
                    **group[0][MESG],
                    NTWK: ip,
                    NMSK: netmask,
                }
            })

        # replace the routes list
        self.routes = new_routes

    def update_revoke_neighbors(self, srcif):
        # get list of neighbors that we should send update/revokes to
        relation = self.relations[srcif]
        peer_or_prov = relation == PEER or relation == PROV

        neighbors = self.sockets.keys()
        if peer_or_prov:
            neighbors = list(filter(lambda n: self.relations[n] == CUST, neighbors))
        return neighbors

    def update(self, srcif, packet):
        # packet is already decoded
        """	handle update packets	"""
        # 2. add an entry to your forwarding table
        new_route = {
            NTWK: packet[MESG][NTWK],
            NMSK: packet[MESG][NMSK],
            PEER: packet[SRCE],
            **packet
        }
        self.routes.append(new_route)

        # 1. save a copy of the announcement in case you need it later
        self.updates.append(new_route)

        # 3. potentially send copies of the announcement to neighboring routers
        neighbors = self.update_revoke_neighbors(srcif)

        msg = packet
        # Add aspath to update packet.
        msg[MESG][APTH].append(int(args.asn))
        for ip in neighbors:
            # send to all others
            if ip != srcif:
                sock = self.sockets[ip]
                msg[SRCE] = ip[:-1]
                msg[SRCE] += '1'
                msg[DEST] = ip
                try:
                    sock.send(json.dumps(msg).encode())
                except Exception as e:
                    print(e)

        self.coalesce(srcif)
        return True

    def revoke_filter(self, item, packet):
        is_valid = True
        for msg in packet[MESG]:
            if msg[NTWK] == item[NTWK] and msg[NMSK] == item[NMSK] and packet[SRCE] == item[SRCE]:
                # matches revoke message, remove from forwarding table
                is_valid = False
                break
        return is_valid
    
    def revoke(self, srcif, packet):
        """	handle revoke packets	"""
        # packet is already decoded
        # 1. save a copy of the revoke announcement in case you need it later
        self.updates.append(packet)
        # 2. remove entry from forwarding table
        self.coalesce(srcif)
        # 3. potentially send copies of the announcement to neighboring routers
        neighbors = self.update_revoke_neighbors(srcif)
        msg = packet.copy()
        for ip in neighbors:
            # send to all others
            if ip != srcif:
                sock = self.sockets[ip]
                msg[SRCE] = ip[:-1]
                msg[SRCE] += '1'
                msg[DEST] = ip
                try:
                    sock.send(json.dumps(msg).encode())
                except Exception as e:
                    print(e)
        return True

    def dump(self, packet):
        # packet is already decoded
        """	handles dump table requests	"""
        msg = {
            SRCE:  packet[DEST], 
            DEST:  packet[SRCE], 
            TYPE: TABL,
            MESG: list(map(lambda r: ({ 
                NTWK: r[MESG][NTWK],
                NMSK: r[MESG][NMSK],
                PEER: r[SRCE],
                }),
                self.routes))
        }
        self.sockets[packet[SRCE]].send(json.dumps(msg).encode())
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # Handle different types of packet.
        type = packet[TYPE]
        if type == UPDT:
            self.update(srcif, packet)
        elif type == DATA:
            self.forward(srcif, packet)
        elif type == DUMP:
            self.dump(packet)
        elif type == RVKE:
            self.revoke(srcif, packet)
        return True

    def run(self):
        while True:
            # Read all sockets to read incoming data.
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    # Load message into memory for processing.
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    
                    self.handle_packet(srcif, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
