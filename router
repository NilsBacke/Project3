#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        for entry in self.routes:
            num255 = entry['netmask'].count('255')
            network_split = entry['network'].split('.')
            daddr_split = daddr.split('.')
            is_valid = True
            for i in range(0, num255):
                if network_split[i] != daddr_split[i]:
                   is_valid = False
                   break
            if is_valid:
                outroutes.append(entry) 
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return routes
            
    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        return routes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        return routes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        # TODO
        outroutes = []
        return routes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return routes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. IGP > EGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        peer = routes[0]['peer'] if len(routes) != 0 else None
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        # packet is already decoded
        """	Forward a data packet	"""
        sock = self.get_route(srcif, packet['dst'])
        if sock == None:
            print("Sent no route")
            self.sockets[srcif].send(json.dumps({
                "src": srcif,
                "dst": packet['src'],
                "type": "no route",
                "msg": {}
            }).encode())
        else:
            print("Sent data packet")
            sock.send(json.dumps(packet).encode())
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        # packet is already decoded
        """	handle update packets	"""
        # 1. save a copy of the announcement in case you need it later
        self.updates.append(packet)
        # 2. add an entry to your forwarding table
        self.routes.append({
            "network": packet['msg']['network'],
            "netmask": packet['msg']['netmask'],
            "peer": packet['src']
        })
        # 3. potentially send copies of the announcement to neighboring routers
        msg = packet
        msg['msg']['ASPath'].insert(0, int(args.asn))
        for ip in self.sockets.keys():
            # send to all others
            if ip != srcif:
                print('SENDING')
                sock = self.sockets[ip]
                msg['src'] = packet['dst'][:-1]
                msg['src'] += '2'
                msg['dst'] = ip[:-1]
                msg['dst'] += '1'
                try:
                    sock.send(json.dumps(msg).encode())
                except Exception as e:
                    print(e)
        return True
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        # packet is already decoded
        """	handles dump table requests	"""
        msg = {
            "src":  packet['dst'], 
            "dst":  packet['src'], 
            "type": "table",
            "msg": self.routes
        }
        print('dump message')
        print(json.dumps(msg))
        self.sockets[packet['src']].send(json.dumps(msg).encode())
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # packet = packet.decode()
        type = packet['type']
        if type == 'update':
            self.update(srcif, packet)
        elif type == 'data':
            self.forward(srcif, packet)
        elif type == 'dump':
            self.dump(packet)
        return True

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        print('generic error')
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    print(k)
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
