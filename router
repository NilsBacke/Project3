#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        # Create Unix sockets for each connected neighbor.
        for relationship in networks:
            network, relation = relationship.split("-")
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        for entry in self.routes:
            # Parse netmasks to perform masking operations.
            num255 = entry['netmask'].count('255')
            network_split = entry['network'].split('.')
            daddr_split = daddr.split('.')
            is_valid = True
            # Iterate through mask to determine ip matching.
            for i in range(0, num255):
                if network_split[i] != daddr_split[i]:
                   is_valid = False
                   break
            if is_valid:
                print('adding')
                print(entry)
                print('because of')
                print(daddr)
                outroutes.append(entry) 
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = routes.copy()
        outroutes.sort(key=lambda r: len(r[MESG][APTH]))
        lowest = len(outroutes[0][MESG][APTH])
        outroutes = list(filter(lambda r: len(r[MESG][APTH]) == lowest, outroutes))
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest localPref """
        outroutes = routes.copy()
        outroutes.sort(reverse=True, key=lambda r: r[MESG][LPRF])
        highest = outroutes[0][MESG][LPRF]
        outroutes = list(filter(lambda r: r[MESG][LPRF] == highest, outroutes))
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = routes.copy()
        outroutes = list(filter(lambda r: r[MESG][SORG], outroutes))
        # handle edge case if all outroutes' selfOrigin is false
        if len(outroutes) == 0:
            return routes.copy()
        return outroutes

    # IGP > EGP > UNK
    def sortOrigins(self, e):
        e = e[MESG][ORIG]
        if e == 'IGP':
            return 3
        elif e == 'EGP':
            return 2
        else:
            return 1

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        outroutes = routes.copy()
        outroutes.sort(reverse=True, key=self.sortOrigins)
        highest = outroutes[0][MESG][ORIG]
        outroutes = list(filter(lambda r: r[MESG][ORIG] == highest, outroutes))
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return routes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. IGP > EGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            if len(routes) > 1:
                strRoutes = routes.copy()
                strRoutes.sort(reverse=True, key=lambda r: int(r[SRCE].replace('.', '')))
                routes = [strRoutes[0]]
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        peer = routes[0]['peer'] if len(routes) != 0 else None
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        # packet is already decoded
        """	Forward a data packet	"""
        # GEt correct route.
        sock = self.get_route(srcif, packet[DEST])
        # If no route available, send to no route message back
        if sock == None:
            self.sockets[srcif].send(json.dumps({
                SRCE: srcif,
                DEST: packet[SRCE],
                TYPE: NRTE,
                MESG: {}
            }).encode())
        else:
            # If socket is available, send to proper neighbor.
            sock.send(json.dumps(packet).encode())
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        # packet is already decoded
        """	handle update packets	"""
        # 1. save a copy of the announcement in case you need it later
        self.updates.append(packet)
        # 2. add an entry to your forwarding table
        self.routes.append({
            NTWK: packet[MESG][NTWK],
            NMSK: packet[MESG][NMSK],
            PEER: packet[SRCE],
            **packet
        })
        # 3. potentially send copies of the announcement to neighboring routers
        msg = packet
        # Add aspath to update packet.
        msg[MESG][APTH].append(int(args.asn))
        for ip in self.sockets.keys():
            # send to all others
            if ip != srcif:
                sock = self.sockets[ip]
                msg[SRCE] = ip[:-1]
                msg[SRCE] += '1'
                msg[DEST] = ip
                try:
                    sock.send(json.dumps(msg).encode())
                except Exception as e:
                    print(e)
        return True
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        # packet is already decoded
        """	handles dump table requests	"""
        msg = {
            SRCE:  packet[DEST], 
            DEST:  packet[SRCE], 
            TYPE: TABL,
            MESG: list(map(lambda r: ({ 
                NTWK: r[MESG][NTWK],
                NMSK: r[MESG][NMSK],
                PEER: r[SRCE],
                }),
                self.routes))
        }
        self.sockets[packet[SRCE]].send(json.dumps(msg).encode())
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # Handle different types of packet.
        type = packet[TYPE]
        if type == UPDT:
            self.update(srcif, packet)
        elif type == DATA:
            self.forward(srcif, packet)
        elif type == DUMP:
            self.dump(packet)
        return True

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        print('generic error')
        return

    def run(self):
        while True:
            # Read all sockets to read incoming data.
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    # Load message into memory for processing.
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    # Send error if packet caused an error.
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
